import { PromiseTypes } from '../../../core/promise';
import { IApiService } from '../../../http/api-service';
import { DesignerServiceTypes as SvcDef } from '../../interfaces/Ams/DesignerService';
import AbortablePromise = PromiseTypes.AbortablePromise;
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import IDesignerService = SvcDef.IDesignerService;
export * from '../../../http/api-service';
export * from '../../interfaces/Ams/DesignerService';
export declare class DesignerService implements IDesignerService {
    private _service;
    constructor(service: IApiService);
    AddAttachmentMapping(request: Requests.AddAttachmentMapping): AbortablePromise<Responses.AddAttachmentMapping>;
    AddCodeDescription(request: Requests.AddCodeDescription): AbortablePromise<Responses.AddCodeDescription>;
    AddCodeDescScore(request: Requests.AddCodeDescScore): AbortablePromise<Responses.AddCodeDescScore>;
    AddCodeType(request: Requests.AddCodeType): AbortablePromise<Responses.AddCodeType>;
    AddDescScore(request: Requests.AddDescScore): AbortablePromise<Responses.AddDescScore>;
    AddDomain(request: Requests.AddDomain): AbortablePromise<Responses.AddDomain>;
    AddGroup(request: Requests.AddGroup): AbortablePromise<Responses.AddGroup>;
    AddRole(request: Requests.AddRole): AbortablePromise<Responses.AddRole>;
    AddUsersToRole(request: Requests.AddUsersToRole): AbortablePromise<Responses.AddUsersToRole>;
    AttachmentMappings(request: Requests.AttachmentMappings): AbortablePromise<Responses.AttachmentMappings>;
    CctvCodes(request: Requests.CctvCodes): AbortablePromise<Responses.CctvCodes>;
    CodeDescriptions(request: Requests.CodeDescriptions): AbortablePromise<Responses.CodeDescriptions>;
    CodeDescScores(request: Requests.CodeDescScores): AbortablePromise<Responses.CodeDescScores>;
    CodeTypes(request: Requests.CodeTypes): AbortablePromise<Responses.CodeTypes>;
    CreateUser(request: Requests.CreateUser): AbortablePromise<Responses.CreateUser>;
    DeleteAttachmentMappings(request: Requests.DeleteAttachmentMappings): AbortablePromise<Responses.DeleteAttachmentMappings>;
    DeleteCodeDescriptions(request: Requests.DeleteCodeDescriptions): AbortablePromise<Responses.DeleteCodeDescriptions>;
    DeleteDomains(request: Requests.DeleteDomains): AbortablePromise<Responses.DeleteDomains>;
    DeleteGroups(request: Requests.DeleteGroups): AbortablePromise<Responses.DeleteGroups>;
    DeleteLogin(request: Requests.DeleteLogin): AbortablePromise<Responses.DeleteLogin>;
    DeleteRoles(request: Requests.DeleteRoles): AbortablePromise<Responses.DeleteRoles>;
    DescScores(request: Requests.DescScores): AbortablePromise<Responses.DescScores>;
    Domains(request: Requests.Domains): AbortablePromise<Responses.Domains>;
    RemoveUsersFromRole(request: Requests.RemoveUsersFromRole): AbortablePromise<Responses.RemoveUsersFromRole>;
    Roles(request: Requests.Roles): AbortablePromise<Responses.Roles>;
    SaveCctvCode(request: Requests.SaveCctvCode): AbortablePromise<Responses.SaveCctvCode>;
    UnlockUsers(request: Requests.UnlockUsers): AbortablePromise<Responses.UnlockUsers>;
    UpdateAttachmentMapping(request: Requests.UpdateAttachmentMapping): AbortablePromise<Responses.UpdateAttachmentMapping>;
    UpdateCodeDescription(request: Requests.UpdateCodeDescription): AbortablePromise<Responses.UpdateCodeDescription>;
    UpdateCodeDescScore(request: Requests.UpdateCodeDescScore): AbortablePromise<Responses.UpdateCodeDescScore>;
    UpdateCodeType(request: Requests.UpdateCodeType): AbortablePromise<Responses.UpdateCodeType>;
    UpdateDescScore(request: Requests.UpdateDescScore): AbortablePromise<Responses.UpdateDescScore>;
    UpdateDomain(request: Requests.UpdateDomain): AbortablePromise<Responses.UpdateDomain>;
    UpdateGroup(request: Requests.UpdateGroup): AbortablePromise<Responses.UpdateGroup>;
    UserRoles(request: Requests.UserRoles): AbortablePromise<Responses.UserRoles>;
    UsersInRole(request: Requests.UsersInRole): AbortablePromise<Responses.UsersInRole>;
    UserStatus(request: Requests.UserStatus): AbortablePromise<Responses.UserStatus>;
}
