import { PromiseTypes } from '../../../core/promise';
import { IApiService } from '../../../http/api-service';
import { RelatesServiceTypes as SvcDef } from '../../interfaces/Ams/RelatesService';
import AbortablePromise = PromiseTypes.AbortablePromise;
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import IRelatesService = SvcDef.IRelatesService;
export * from '../../../http/api-service';
export * from '../../interfaces/Ams/RelatesService';
export declare class RelatesService implements IRelatesService {
    private _service;
    constructor(service: IApiService);
    ByTableName(request: Requests.ByTableName): AbortablePromise<Responses.ByTableName>;
    EquipChangeOutChangedBy(request: Requests.EquipChangeOutChangedBy): AbortablePromise<Responses.EmployeeRelates>;
    InspectionCancelledBy(request: Requests.InspectionCancelledBy): AbortablePromise<Responses.EmployeeRelates>;
    InspectionClosedBy(request: Requests.InspectionClosedBy): AbortablePromise<Responses.EmployeeRelates>;
    InspectionEditAfterClose(request: Requests.InspectionEditAfterClose): AbortablePromise<Responses.EmployeeRelates>;
    InspectionInitiatedBy(request: Requests.InspectionInitiatedBy): AbortablePromise<Responses.EmployeeRelates>;
    InspectionInspectedBy(request: Requests.InspectionInspectedBy): AbortablePromise<Responses.EmployeeRelates>;
    InspectionSubmitTo(request: Requests.InspectionSubmitTo): AbortablePromise<Responses.EmployeeRelates>;
    ProblemLeafDispatchTo(request: Requests.ProblemLeafDispatchTo): AbortablePromise<Responses.EmployeeRelates>;
    ProblemLeafSubmitTo(request: Requests.ProblemLeafSubmitTo): AbortablePromise<Responses.EmployeeRelates>;
    ProjectApprovedBy(request: Requests.ProjectApprovedBy): AbortablePromise<Responses.EmployeeRelates>;
    ProjectAssignedTo(request: Requests.ProjectAssignedTo): AbortablePromise<Responses.EmployeeRelates>;
    ProjectInitiatedBy(request: Requests.ProjectInitiatedBy): AbortablePromise<Responses.EmployeeRelates>;
    RequestCancelledBy(request: Requests.RequestCancelledBy): AbortablePromise<Responses.EmployeeRelates>;
    RequestClosedBy(request: Requests.RequestClosedBy): AbortablePromise<Responses.EmployeeRelates>;
    RequestDispatchTo(request: Requests.RequestDispatchTo): AbortablePromise<Responses.EmployeeRelates>;
    RequestEditAfterClose(request: Requests.RequestEditAfterClose): AbortablePromise<Responses.EmployeeRelates>;
    RequestInitiatedBy(request: Requests.RequestInitiatedBy): AbortablePromise<Responses.EmployeeRelates>;
    RequestSubmitTo(request: Requests.RequestSubmitTo): AbortablePromise<Responses.EmployeeRelates>;
    SearchViewCost(request: Requests.SearchViewCost): AbortablePromise<Responses.EmployeeRelates>;
    TableFields(request: Requests.TableFields): AbortablePromise<Responses.TableFields>;
    TaskAssignTo(request: Requests.TaskAssignTo): AbortablePromise<Responses.EmployeeRelates>;
    TransferRequestedBy(request: Requests.TransferRequestedBy): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderCancelledBy(request: Requests.WorkOrderCancelledBy): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderClosedBy(request: Requests.WorkOrderClosedBy): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderCompletedBy(request: Requests.WorkOrderCompletedBy): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderEditAfterClose(request: Requests.WorkOrderEditAfterClose): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderInitiatedBy(request: Requests.WorkOrderInitiatedBy): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderRequestedBy(request: Requests.WorkOrderRequestedBy): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderSubmitTo(request: Requests.WorkOrderSubmitTo): AbortablePromise<Responses.EmployeeRelates>;
    WorkOrderSupervisors(request: Requests.WorkOrderSupervisors): AbortablePromise<Responses.EmployeeRelates>;
}
